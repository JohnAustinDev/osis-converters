#!/usr/bin/perl
# This file is part of "osis-converters".
# 
# Copyright 2021 John Austin (gpl.programs.info@gmail.com)
#     
# "osis-converters" is free software: you can redistribute it and/or 
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation, either version 2 of 
# the License, or (at your option) any later version.
# 
# "osis-converters" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "osis-converters".  If not, see 
# <http://www.gnu.org/licenses/>.

# Run specified conversions for any number of projects, as quickly as possible

use strict;

our (@CONV_OSIS, @CONV_PUBS, %CONV_NOCANDO, %CONV_DEPENDENCIES, $SCRD, 
    $INPD, $DEBUG, $VAGRANT, $MODRE, $CONVERSION, $MAXTHREADS, $SKIPRE, 
    $LOGFILE, $NO_ADDITIONAL, $INFO, @RUN, %DEPENDENCIES, @RUN_PROJ, 
    @RUN_MODS, @IGNORE_PROJ, $JOBMSG, %CONV_OUTPUT_FILES, 
    %CONV_OUTPUT_SUBDIR, %ARGS, $MAINMOD);

BEGIN {

$DEBUG   = 0;
$VAGRANT = 0;

use threads;
use threads::shared;
use Cwd;
use Data::Dumper; $Data::Dumper::Sortkeys = 1;

use strict; use File::Spec; our $SCRIPT = File::Spec->rel2abs(__FILE__); our $SCRD = $SCRIPT; $SCRD =~ s/([\\\/][^\\\/]+){2}$//; require "$SCRD/lib/common/bootstrap.pm"; &init(@ARGV);

our $PROJDIR = &processArguments();

# Save these for possible Vagrant restart
our $INPD_START = $INPD;
our $LOGFILE_START = $LOGFILE;

if (-e $LOGFILE) {unlink($LOGFILE);}

$INFO = &getProjectsInfo($PROJDIR);

@RUN = &getScriptsToRun($CONVERSION, $MODRE, $SKIPRE, $INFO);

%DEPENDENCIES = &getDependencies($CONVERSION, \@RUN, $INFO);

if ($DEBUG) {
  &Log("INFO = ".Dumper($INFO)."\n");
  &Log("DEPENDENCIES = ".Dumper(\%DEPENDENCIES)."\n\n");
  no strict 'refs';
  my @v = ('INPD', 'PROJDIR', 'LOGFILE', 'MODRE', 'SKIP', 'CONVERSION', 'MAXTHREADS');
  print join("\n", map("$_=$$_", @v))."\n\n";
}

@RUN_PROJ    = @{&projects( $INFO, sort map($_->{'m'},@RUN) )->{'p'}};
@RUN_MODS    = @{&projects( $INFO, sort map($_->{'m'},@RUN) )->{'m'}};
@IGNORE_PROJ = @{&projects( $INFO, sort keys %{$INFO} )->{'ip'}};
$JOBMSG = "Scheduling ".@RUN." jobs on ".@RUN_PROJ.
    " projects (".@RUN_MODS." modules):\n";
my $dr;
foreach my $rP (sort { $a->{'m'} cmp $b->{'m'} } @RUN) {
  my $outdir = ( !&runningInVagrant() ? 
    File::Spec->abs2rel(&modOutdir($INFO, $rP->{'m'}), $SCRD) : 
    File::Spec->abs2rel(&hostPath(&modOutdir($INFO, $rP->{'m'})), &hostPath($SCRD))
  );
  $JOBMSG .= sprintf("%12s:%12s %-33s %s\n", 
                $rP->{'m'}, 
                $rP->{'s'} . ( $rP->{'additional'} ? '*' : '' ),
                &depmsg($rP->{'r'}, \%DEPENDENCIES), 
                $outdir );
                
  if ($rP->{'additional'}) {
    $dr = "*Added to meet all dependencies; use -n to skip these.";
  }
}
$JOBMSG .= "$dr\n\n";
if (!&runningInVagrant()) {print $JOBMSG;}

if (! scalar @RUN) {
  print "ABORT: There is nothing to do.\n";
  print &usage();
  exit 1;
}

my $restartInVagrant;
foreach my $p (@RUN_PROJ) {
  if ($INFO->{$p}{"system+VAGRANT"}) {$VAGRANT = 1;}
}
my $isCompatibleLinux = ($^O =~ /linux/i ? &shell("lsb_release -a", 3):'');
if (!&runningInVagrant() && ($VAGRANT || !$isCompatibleLinux)) {
  $restartInVagrant++;
}

if (!&runningInVagrant()) {
  print "Do you want to continue".($restartInVagrant ? ' in Vagrant':'')."? (Y/N): ";
  my $resp = <STDIN>;
  if ($resp !~ /^y(es)?$/i) {
    print "Exiting...\n";
    exit;
  }
}
   
if (!&runningInVagrant() && $restartInVagrant) {
  if (-e "$SCRD/.hostinfo") {unlink("$SCRD/.hostinfo");} # no longer used
  # Update .vm.conf's @OC_SYSTEM_PATH_CONFIGS Vagrant paths
  foreach my $m (@RUN_PROJ) {
    $INPD = $INFO->{$m}{'path'}; 
    $MAINMOD = $m;
    &set_project_globals();
    &set_system_globals();
  }
}

if ($restartInVagrant) {
  &Log("Restarting in Vagrant...\n");
  $INPD = $INPD_START;
  $LOGFILE = $LOGFILE_START;
  &restartWithVagrantAndExit();
}

# This thread continues after the following BEGIN block sub definitions!
########################################################################


sub processArguments {

  my $all = join('|', keys %{&getConversionArgs()});
  if ($CONVERSION !~ /^($all)$/) {
    print "ABORT: unknown conversion: $CONVERSION\n";
    print &usage();
    exit 1;
  }
  
  my $dir = ($LOGFILE =~ /^(.*)[\\\/][^\\\/]+$/ ? $1:'');
  if (!$dir || ! -d $dir) {
    print "ABORT: log file directory does not exist: $LOGFILE\n";
    print &usage();
    exit 1;
  }
  
  # If INPD is within a project subdirectory, change it to the main
  # project directory.
  my $projdir = $INPD;
  my @p = split(/[\\\/]/, $projdir);
  while (@p) {
    my $d = join('/', @p);
    if (-f "$d/config.conf" || -f "$d|CF_osis2osis.txt") {
      $projdir = $d; last;
    }
    pop(@p);
  }
  
  # If INPD is a project main directory and -m was not specified, 
  # then adjust INPD to the parent dir and set -m to 'MOD(DICT)?'. 
  # This allows any dependencies to be located.
  my $adjust;
  if (!$ARGS{'m'} && ! -e "$projdir/defaults") {
    if (-d "$projdir/../defaults") {$adjust = '..';}
    if ($adjust) {
      my @p = split(/[\\\/]/, $projdir);
      my @d = split(/[\\\/]/, $adjust);
      my $mod = @p[(@p-@d)];
      $MODRE = '^' . $mod . ($mod !~ /DICT$/ ? '(DICT)?':'') . '$';
      $projdir .= "/$adjust";
    }
  }
  
  # Adjust MODRE and SKIP...
  # If -m was specified as a single non-DICT module, but INPD is a
  # project parent directory (non-adjusted), then include the DICT mod.
  if (!$adjust && $ARGS{'m'} && -e "$projdir/defaults" 
      && $MODRE =~ /^[A-Z]+$/ && $MODRE !~ /DICT$/) {
    $MODRE = '^'.$MODRE.'(DICT)?$';
  }
  elsif ($ARGS{'m'} && $MODRE !~ /(^\^|\$$)/) {$MODRE = '^'.$MODRE.'$';}
  if ($ARGS{'x'} && $SKIPRE !~ /(^\^|\$$)/) {$SKIPRE = '^'.$SKIPRE.'$';}
  
  return $projdir;
}

sub depmsg {
  my $run = shift;
  my $depP = shift;
  
  my $deps = join(', ', @{$depP->{$run}});
  my $depmsg = ($deps ? "(after $deps)":'');
  $depmsg =~ s/ (osis2osis|sfm2osis)//g;
  
  return $depmsg;
}

sub projects {
  my $infoP = shift;
           
  my (%m, %p, %ip);
  my $mod = shift;
  while ($mod) {
    if ($infoP->{$mod}{'runable'}) {
      my $main = &main($mod, $infoP);
      my $dict = &dict($mod, $infoP);
      $p{$main}++;
      $m{$main}++;
      if ($dict)  {
        $m{$dict}++;
      }
    }
    else {$ip{$mod}++;}
    
    $mod = shift;
  }
  
  my %result = ( 'm'  => [ sort keys %m  ],   # modules
                 'p'  => [ sort keys %p  ],   # projects
                 'ip' => [ sort keys %ip ] ); # ignored projects
  
  return \%result
}

# Fill a hash with config.conf and CF_osis2osis.txt information for all
# projects in $pdir
sub getProjectsInfo {
  my $pdir = shift;
  
  opendir(DIR, $pdir) or die;
  my @projects = readdir(DIR);
  closedir(DIR);
  
  my %info;
  foreach my $proj (@projects) {
    if ($proj eq '..' || !-d "$pdir/$proj") {next;}
    if ($proj eq '.') {
      $proj = ($pdir =~ s/\/([A-Z]+)$// ? $1:'');
      if (!$proj) {next;}
    }
    if (! -e "$pdir/$proj/CF_osis2osis.txt" && ! -e "$pdir/$proj/config.conf") {next;}
    &getProjectInfo($pdir, $proj, \%info);
  }
  
  # Create info for dict modules now
  foreach my $proj (keys %info) {
    if (!&dict($proj, \%info)) {next;}
    # Only runnable DICT modules are returned by dict()
    $info{$proj.'DICT'}{'runable'}++;
    $info{$proj.'DICT'}{'path'} = $info{$proj}{'path'}."/${proj}DICT";
    $info{$proj.'DICT'}{'configProject'} = $info{$proj}{'configProject'};
    if ($info{$proj}{'sourceProject'}) {
      $info{$proj.'DICT'}{'sourceProject'} = $info{$proj}{'sourceProject'};
    }
  }
  
  # Add module types
  foreach my $m (keys %info) {
    if (!$info{$m}{'runable'}) {next;}
    
    my $cp = $info{$m}{'configProject'};
    my $cpm = ($m =~ /DICT$/ ? $cp.'DICT':$cp);
    my $moddrv = $info{$cp}{"$cpm+ModDrv"};
    
    if (!$moddrv) {
      my $sp = $info{$m}{'sourceProject'};
      my $spm = ($m =~ /DICT$/ ? $sp.'DICT':$sp);
      $moddrv = $info{$sp}{"$spm+ModDrv"};
    }
    
    my $type;
    if    ($moddrv =~ /text/i)    {$type = 'bible';}
    elsif ($moddrv =~ /ld/i)      {$type = 'dict';}
    elsif ($moddrv =~ /genbook/i) {$type = 'childrensBible';}
    elsif ($moddrv =~ /com/i)     {$type = 'commentary';}
    else {print "WARNING: Could not determine module type: $m\n";}
    
    $info{$m}{'type'} = $type;
  }

  return \%info;
}

sub getProjectInfo {
  my $pdir = shift;
  my $proj = shift;
  my $infoP = shift;

  if ($proj eq 'defaults') {return;}
  
  # - sourceProject is osis2osis source project, or else undef 
  # if OSIS will be created by sfm2osis (the usual case).
  # - configProject is the the MAIN module of a project if it has a
  # config.conf or else the MAIN module of the sourceProject if there 
  # is a sourceProject with a config.conf (projects with a 
  # CF_osis2osis.txt file might not have their own config.conf file 
  # until after osis2osis is run, so this script may reference the 
  # sourceProject's config.conf in such a case).
  
  if (-e "$pdir/$proj/CF_osis2osis.txt") {
    open(CF, "<:encoding(UTF-8)", "$pdir/$proj/CF_osis2osis.txt") 
      or die;
    while(<CF>) {
      if ($_ =~ /^SET_sourceProject:(.*?)\s*$/) {
        my $sourceProject = $1;
        # If CF_osis2osis.txt has SET_sourceProject, its modules are
        # considered runnable.
        $infoP->{$proj}{'runable'}++;
        $infoP->{$proj}{'path'} = &shortPath("$pdir/$proj");
        $infoP->{$proj}{'sourceProject'} = $sourceProject;
        $infoP->{$proj}{'configProject'} = $sourceProject;
      }
      if ($_ =~ /^CCOSIS\:\s*(\S+)\s*$/) {
        $infoP->{$proj}{'CCOSIS'}{$1}++;
      }
    }
    close(CF);
  }
  
  if (!-e "$pdir/$proj/config.conf") {return;}
  $infoP->{$proj}{'configProject'} = $proj;
  
  # Projects where config.conf contains [system] are considered runnable
  my $cp = $infoP->{$proj}{'configProject'};
  if (&shell("grep '\\[system\\]' \"$pdir/$cp/config.conf\"", 3, 1)) {
    $infoP->{$proj}{'runable'}++;
    $infoP->{$proj}{'path'} = &shortPath("$pdir/$proj");
    if (!defined($infoP->{$cp}{'MainmodName'})) {
      $INPD = "$pdir/$cp";
      our $CONF; &set_project_globals();
      foreach my $k (keys %{$CONF}) {$infoP->{$cp}{$k} = $CONF->{$k};}
    }
  }
}

# Return a list of individual scripts to be run on individual modules.
sub getScriptsToRun {
  my $conversion = shift;
  my $keepRE = shift;
  my $skipRE = shift;
  my $infoP = shift;
  
  # Get all scripts requested to be run
  my @scripts = &conversionScripts($conversion);
  
  # Apply them correctly to the targeted modules
  my @run;
  foreach my $m (sort keys %{$infoP}) {
    my @s = @scripts;
    
    # Skip non-target and non-runnable modules
    if (!$infoP->{$m}{'runable'}) {next;}
    if ($keepRE && $keepRE ne 'all' && $m !~ /$keepRE/) {next;}
    if ($skipRE && $m =~ /$skipRE/) {next;}
    
    # Remove no can dos
    my $noCanDoAP = $CONV_NOCANDO{$infoP->{$m}{'type'}};
    if (defined($noCanDoAP)) {
      for (my $i=0; $i<@s; $i++) {
        my $to = (@s[$i] =~ /2(\w+)$/ ? $1:'');
        foreach (@{$noCanDoAP}) {
          if ($_ eq $to) {splice(@s, $i, 1); $i--;}
        }
      }
    }
    
    # Remove if ARG_skipConversion is set in config.conf
    for (my $i=0; $i<@s; $i++) {
      my $skip = $infoP->{$infoP->{$m}{'configProject'}}{@s[$i]."+ARG_skipConversion"};
      if ($skip && $skip =~ /^(true|yes)$/i) {
        splice(@s, $i, 1); $i--;
        print "WARNING: ARG_skipConversion is skipping: '@s[$i] $m'\n";
      }
    }
    
    # Resolve the osis pathway and apply/remove as needed
    for (my $i=0; $i<@s; $i++) {
      if (@s[$i] !~ /osis$/) {next;}
      my $myosis = &osisScript($m, $infoP);
      if (@s[$i] eq 'osis') {@s[$i] = $myosis;}
      elsif (@s[$i] ne $myosis) {splice(@s, $i, 1); $i--;}
    }
    
    # Run the remaining scripts on the module
    foreach my $s (@s) {push(@run, &run($s, $m, $infoP));}
  }
  
  return @run;
}

# Return an object containing all necessary information for a particular
# script to run on a module.
sub run {
  my $script = shift;
  my $module = shift;
  my $infoP = shift;
  my $isAdditional = shift;
  
  return {
    'r' => "$script $module",
    's' =>  $script, 
    'm' =>  $module, 
    'p' =>  $infoP->{$module}{'path'},
    'o' =>  &modOutdir($infoP, $module),
    'additional' => $isAdditional,
  };
}

# Return a list of osis-converters scripts to be invoked for any given 
# convert argument to this script.
sub conversionScripts {
  my $conversion = shift;
  
  my @scripts;
  
  foreach (@CONV_OSIS) {
    if ($conversion eq $_) { push(@scripts, $_); return @scripts; }
  }
  
  if ($conversion =~ /^(.*)2(.*)$/)   {
    my $from = $1; my $to = $2;
    if ($from eq 'sfm') {push(@scripts, 'osis');}
    if ($to eq 'all')   {push(@scripts, @CONV_PUBS);}
    else {push(@scripts, "osis2$to");}
  }
  
  return @scripts;
}

sub getDependencies {
  my $conversion = shift;
  my $runAP = shift;
  my $infoP = shift;
  my $dependencyHP = shift;
  
  my %deps; if (!$dependencyHP) {$dependencyHP = \%deps;}
  
  foreach my $rP (@{$runAP}) {
    if (defined($dependencyHP->{$rP->{'r'}})) {next;}
    &addDependencies($conversion, $dependencyHP, $rP, $infoP);
  }
  
  # When requested, remove dependencies on modules which are not being run
  if ($NO_ADDITIONAL) {
    my %rms; map($rms{$_}++, map($_->{'m'}, @{$runAP}));
    foreach my $r (keys %{$dependencyHP}) {
      for (my $i=0; $i<@{$dependencyHP->{$r}}; $i++) {
        @{$dependencyHP->{$r}}[$i] =~ /^(\S+) (\S+)$/;
        my $s = $1; my $m = $2;
        if (defined($rms{$m})) {next;}
        print "WARNING: skipping dependency (-n option is set):\n" . 
          sprintf("%12s:%12s %-33s %s\n\n", $m, $s, &depmsg($r, $dependencyHP), 'SKIPPED');
        splice(@{$dependencyHP->{$r}}, $i, 1); $i--;
      }
    }
  }
  else {
    # Check for dependencies which require additional runs
    foreach my $r (keys %{$dependencyHP}) {
  DEP:
      for (my $i=0; $i<@{$dependencyHP->{$r}}; $i++) {
        my $d = @{$dependencyHP->{$r}}[$i];
        foreach (@{$runAP}) {if ($_->{'r'} eq $d) {next DEP;}}
        
        # This dependency is not a requested run, but is required, so add 
        # an additional run or else abort.
        $d =~ /^(\S+) (\S+)$/; my $s = $1; my $m = $2;
        if ($infoP->{$m} && $infoP->{$m}{'runable'}) {
          unshift(@{$runAP}, &run($s, $m, $infoP, 1));
          &getDependencies($conversion, $runAP, $infoP, $dependencyHP);
        }
        else {
          print "
ABORT: could not locate a required module: '$m' in '$PROJDIR'.
Use the -n flag to run anyway without it, or use a project directory 
containing the necessary project(s).";
          exit 1;
        }
      }
    }
  }
  
  return %{$dependencyHP};
}

sub addDependencies {
  my $conversion = shift;
  my $depsP = shift;
  my $rP = shift; my $r=$rP->{'r'}; my $s=$rP->{'s'}; my $m=$rP->{'m'};
  my $infoP = shift;
  
  my $main = &main($m, $infoP);
  my $dict = &dict($m, $infoP);
  my $smain = $infoP->{$main}{'sourceProject'};
  
  $depsP->{$r} = [];
  
  my %deps; my $dkey = 
    ( $s =~ /(^sfm|osis$)/ ? 'osis' : ($s =~ /2(.*?)$/ ? $1:'none') ) .
    ' ' .
    ($dict && $m eq $dict ? 'DICT':'MAIN');
   
  &addDependency($conversion, \%deps, $dkey, $m, $smain, $infoP);
  if ($smain) {
    $dkey .= '(with-sourceProject)';
    &addDependency($conversion, \%deps, $dkey, $m, $smain, $infoP);
  }
  
  foreach my $d (sort keys %deps) {push(@{$depsP->{$r}}, $d);}
}

sub addDependency {
  my $conversion = shift;
  my $hashP = shift;
  my $key = shift;
  my $m = shift;
  my $smain = shift;
  my $infoP = shift;

  if (!defined($CONV_DEPENDENCIES{$key})) {return;}
  
  foreach my $d (@{$CONV_DEPENDENCIES{$key}}) {
    $d =~ /^(\S+) (\S+)$/; my $st = $1; my $mt = $2;
    
    my $ifExists = ($mt =~ s/\?$// ? 1:0);
    
    # Don't include the OSIS creation dependencyies when converting from 
    # OSIS, instead use the pre-existing OSIS files. 
    if ($st eq 'osis' && $conversion =~ /^osis2/) {next;}
     
    my $mod;
    if    ($mt eq 'MAIN')                {$mod = &main($m, $infoP); }
    elsif ($mt eq 'DICT')                {$mod = &dict($m, $infoP); }
    elsif ($mt eq 'MAIN(sourceProject)') {$mod = &main($smain, $infoP);}
    elsif ($mt eq 'DICT(sourceProject)') {$mod = &dict($smain, $infoP);}
    
    if (!$mod && $ifExists) {next;}
    
    if (!$mod) {
      print "
ABORT: failed to decode dependency: $d (m=$m, smain=$smain)\n";
      exit 1;
    }
    
    my $script = ($st eq 'osis' ? &osisScript($mod, $infoP) : "osis2$st");

    $hashP->{"$script $mod"}++;
  }
}


# Returns the MAIN module name of the project containing module $m, or
# undef if $m is not in $infoP or is unrunable.
sub main {
  my $m = shift;
  my $infoP = shift; if (!$infoP) {$infoP = $INFO;}
  
  if (!$infoP->{$m} || !$infoP->{$m}{'runable'}) {return;}
  
  my $main = $infoP->{$m}{'configProject'};
  if (!$main) {print "ABORT: no configProject for $m\n"; exit 1;}

  return $main;
}

# Returns the DICT sub-module name if $m is in $infoP, is runable, and
# the project has a DICT sub-module. Otherwise returns undef.
sub dict {
  my $m = shift;
  my $infoP = shift; if (!$infoP) {$infoP = $INFO;}
  
  # Only runable projects can have dictionaries
  my $dict;
  if ($infoP->{$m}{'runable'}) {
  
    # If this project has a sourceProject, we must look at 
    # sourceProject's conf.
    my $sproj = ( $infoP->{$m}{'sourceProject'} ? 
      $infoP->{$m}{'sourceProject'}:$infoP->{$m}{'configProject'} );
   
    # It must have a sub-module which follows all the rules.
    my $modDrv = $infoP->{$sproj}{$sproj."DICT+ModDrv"};
    if ($modDrv && $modDrv =~ /LD/) {
      $dict = ($m !~ /DICT$/ ? $m.'DICT':$m);
    }
  }

  return $dict;
}

# Returns the script that will be used to create the module's OSIS file 
# (sfm2osis or osis2osis).
sub osisScript {
  my $m = shift;
  my $infoP = shift; if (!$infoP) {$infoP = $INFO;}
  
  if (!$infoP->{$m}{'sourceProject'}) {
    return 'sfm2osis';
  }
  
  if (!&dict($m, $infoP)) {
    return 'osis2osis';
  }
  
  my $main = $m; $main =~ s/DICT$//;
  return ($infoP->{$main}{'CCOSIS'}{$m} ? 'osis2osis':'sfm2osis');
}

# Return the output directory where the OSIS file will go. It is an
# absolute path on the running file system (so it could be a host path
# or a virtual machine path depending on where the script is being run).
sub modOutdir {
  my $infoP = shift;
  my $m = shift;
  
  my $p = $m; $p =~ s/DICT$//;
  
  my $outdir;
  if (!&runningInVagrant()) {
    $outdir = $infoP->{$p}{'system+OUTDIR'};
    if ($infoP->{$p}{'sourceProject'}) {
      $outdir = $infoP->{$infoP->{$p}{'sourceProject'}}{'system+OUTDIR'};
    }
    if ($outdir) {$outdir = "$SCRD/$outdir";}
  }
  else {
    my $cP = &readConfFile("$SCRD/.vm.conf", undef, undef, 1);
    $outdir = $cP->{"$p+OUTDIR"};
  }
    
  $outdir = ( $outdir ? 
      "$outdir/$m" : 
      "$PROJDIR/$p/".($m =~ /DICT$/ ? "$m/":'')."output"
    );
 
  return &shortPath($outdir);
}

}
# BEGIN was used to separate Perl module dependencies for Vagrant.
# Code beyond this point may be run in a Vagrant virtual machine.
########################################################################

use Encode;
use DateTime;
use Term::ReadKey;

&Log("Ignoring ".@IGNORE_PROJ." projects which need upgrading:\n");
foreach (@IGNORE_PROJ) {&Log(sprintf("%12s\n", $_));}
&Log("\n");

&Log($JOBMSG);

my $STARTTIME;
&timer('start'); &Log("\n");

if (!&runningInVagrant()) {ReadMode(4);}

# Now run all jobs until there is nothing left to do, or the ESC key is 
# pressed.
my $NUM_THREADS :shared = 0;
my %DONE :shared;
my @STARTED :shared;
my $WAIT = 3;
my $KEY = 0;
my $PAUSED = 0;
my $KILLED = 0;
my @THREADS;
while ( ( &working(\@STARTED, \%DONE) || @RUN ) && 
          $KEY != 27 
      ) { # 27 is ESC key
      
  $KEY = 0; # clear if set by inner while loop
  while ( !$PAUSED && $KEY != 27 && $NUM_THREADS < $MAXTHREADS && @RUN ) {
    # Start another conversion, skipping over any conversion whose 
    # dependencies are not done.
    my $x = -1;
    my $ok;
    do {
      $x++;
      $ok = 1;
      foreach my $run (@{$DEPENDENCIES{$RUN[$x]->{'r'}}}) {
        if (!$DONE{$run}) {$ok = 0;}
      }
    } while ($x < $#RUN && !$ok);
    
    if (@{$DEPENDENCIES{$RUN[$x]->{'r'}}}) {
      if (!$ok) {
        print "Waiting for dependencies (".($MAXTHREADS - $NUM_THREADS)." free threads)...\n".
        last;
      }
      print "NOTE: Dependencies of ".$RUN[$x]->{'r'}." are done:\n\t".
      join("\n\t", @{$DEPENDENCIES{$RUN[$x]->{'r'}}})."\n";
    }
    
    sleep(2); # so jobs don't start too close together
    push(@THREADS, threads->create(sub {
      print "Starting: ".$RUN[$x]->{'r'}."\n";
      &runScript($RUN[$x]);
      $NUM_THREADS--;
      $DONE{$RUN[$x]->{'r'}}++;
      print "Exiting: ".$RUN[$x]->{'r'}."\n";
    }));
    
    $NUM_THREADS++;
    my $s = splice(@RUN, $x, 1);
    push(@STARTED, $s->{'r'});
    if (@RUN) {print("There are ".@RUN." jobs left...\n");}
    
    &readKey();
  }
  
  sleep(1);

  if (!$KEY) {  # allow KEY already set by inner while loop to break outer loop
    &readKey();
  }
}

if (!&runningInVagrant()) {ReadMode(0);}

if ($KEY == 27) {
  &Log("\n");
  &Log("
No more conversions will be scheduled...
Press ctrl-c to kill remaining threads and exit.
Or wait for the current threads to finish:\n");
&working(\@STARTED, \%DONE, 'log');
}
else {
  print "No more projects to start and none are running!\n";
}

END {
  if (exists(&ReadMode)) {ReadMode(0);}
  
  foreach my $th (@THREADS) {$th->join();}

  &timer('stop');
}

########################################################################
########################################################################

# Run osis-converters on a module, and report.
sub runScript {
  my $rP = shift;
  
  my $script = $rP->{'s'};
  my $mod    = $rP->{'m'};
  my $path   = $rP->{'p'};
  my $outdir = $rP->{'o'};
  
  my $startTime = time;
  
  my %args = ('first' => $path);
  my $cmd = "$SCRD/bin/$script " . &writeArgs(\%args);
  
  print "Started: $cmd\n";
  my $result = &shell($cmd, 3);

  my @errors;
  foreach my $line (split(/\n+/, $result)) {
    if ($line !~ /ERROR/) {next;}
    push(@errors, "$mod $line");
  }
  
  our $MOD = $mod; # for conversionTestFile() to work
  if (!&conversionTestFile($startTime, $script, $outdir)) {
    push(@errors, "$mod ERROR: No new output file for $script");
  }
  
  if (@errors) {
    &Log(sprintf("\nFAILED:  %12s %9s FINISHED WITH %i ERROR(s).\n", 
          $script, 
          $mod, 
          scalar @errors
    ));
    foreach my $e (@errors) {&Log("$e\n");}
    &Log("\n");
    return;
  }
  
  &Log(sprintf("SUCCESS! %12s %9s is FINISHED.\n", 
        $script, 
        $mod
  ));
}

# Returns 1 if the given script has at least one new output file in its
# expected output directory, or 0 otherwise.
sub conversionTestFile {
  my $startTime = shift;
  my $script = shift;
  my $outdir = shift;
  
  foreach my $test (@{$CONV_OUTPUT_FILES{$script}}) {
    my $t = &const($test);
    my $sd = '';
    if ($CONV_OUTPUT_SUBDIR{$script}) {
      $sd = '/'.&const($CONV_OUTPUT_SUBDIR{$script});
    }
    foreach my $f (glob("${outdir}$sd/$t")) {
      if ((stat($f))[9] > $startTime) {return 1;}
    }
  }
  
  return 0;
}

sub timer {
  my $do = shift;
 
  if ($do =~ /start/i) {
    &Log("start time: ".localtime()."\n");
    $STARTTIME = DateTime->now();
  }
  elsif ($do =~ /stop/i) {
    if (!$STARTTIME) {return;}
    my $now = DateTime->now();
    my $e = $now->subtract_datetime($STARTTIME);
    &Log("elapsed time: ".
          ($e->hours ? $e->hours." hours ":'').
          ($e->minutes ? $e->minutes." minutes ":'').
          $e->seconds." seconds\n");
    $STARTTIME = undef;
  }
}

# Return the number of projects currently running, and print or log a 
# message about the currently running projects.
my $LASTMSG;
sub working {
  my $startedAP = shift;
  my $doneHP = shift;
  my $logOrPrint = shift; # 'log' means log msg. Otherwise print msg. 

  my @working;
  foreach my $r (@{$startedAP}) {
    if (!$doneHP->{$r}) {push(@working, $r);}
  }
  
  if ($logOrPrint || !$WAIT) {
    my $msg = "Working on: \n\t".join("\n\t", @working)."\n";
    if (!&runningInVagrant() && !$KILLED) {
      if (!$PAUSED) {
        $msg .= "Press p to pause the scheduler. ";
      }
      else {
        $msg .= "Press p again to continue scheduling. ";
      }
      $msg .= "Press ESC to kill the scheduler.\n";
    }
    
    if ($logOrPrint && $logOrPrint =~ /log/i) {&Log($msg);}
    elsif ($msg ne $LASTMSG) {
      print $msg;
      $LASTMSG = $msg;
    }
    
    $WAIT = 15; # 30 seconds at 2 second sleeps
  }
  
  $WAIT--;
  
  return scalar @working;
}

sub readKey {
  use Term::ReadKey;
  if (&runningInVagrant()) {return;}
  $KEY = ReadKey(-1);
  $KEY = ($KEY ? ord($KEY):0);
  if ($KEY == 112) {
    $PAUSED = ($PAUSED ? 0:1);
    if ($PAUSED) {
      print "\nThe scheduler is currently PAUSED.\n";
    }
    else {
      print "\nRestarting the scheduler...\n";
    }
  }
  elsif ($KEY == 27) {
    $KILLED++;
    print "ESC was pressed...\n";
  }
}

1;
